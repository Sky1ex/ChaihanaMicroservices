// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.DataBase_and_more;

#nullable disable

namespace AspireForChaihana.ServiceDefaults.Migrations.Customers
{
    [DbContext(typeof(WebDbForCustomers))]
    partial class WebDbForCustomersModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.AddressElement", b =>
                {
                    b.Property<Guid>("AddressElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Apartment")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AddressElementId");

                    b.ToTable("AddressElements");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Adress", b =>
                {
                    b.Property<Guid>("AdressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Apartment")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AdressId");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<int>("Table")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.CartElement", b =>
                {
                    b.Property<Guid>("CartElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("CartElementId");

                    b.HasIndex("CartId");

                    b.ToTable("CartElements");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdressAddressElementId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.HasIndex("AdressAddressElementId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.OrderElement", b =>
                {
                    b.Property<Guid>("OrderElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderElementId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderElements");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Adress", b =>
                {
                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.User", null)
                        .WithMany("Adresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Booking", b =>
                {
                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Cart", b =>
                {
                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("AspireForChaihana.ServiceDefaults.Models.Customers.Cart", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.CartElement", b =>
                {
                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.Cart", null)
                        .WithMany("CartElement")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Order", b =>
                {
                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.AddressElement", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressAddressElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.OrderElement", b =>
                {
                    b.HasOne("AspireForChaihana.ServiceDefaults.Models.Customers.Order", null)
                        .WithMany("OrderElement")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Cart", b =>
                {
                    b.Navigation("CartElement");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.Order", b =>
                {
                    b.Navigation("OrderElement");
                });

            modelBuilder.Entity("AspireForChaihana.ServiceDefaults.Models.Customers.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
